import { c as init, a as assign, d as createElement, e as addLoc, f as insert, g as noop, h as run, i as detachNode, b as protoDev } from './chunk-b3db9592.js';

/* src\Chatbox.html generated by Svelte v2.16.1 */

var methods = {
  helloWorld() {
  console.log('Hello World!');
  }
};

const file = "src\\Chatbox.html";

function create_main_fragment(component, ctx) {
	var h1, current;

	return {
		c: function create() {
			h1 = createElement("h1");
			h1.textContent = "Hello Chatbox";
			addLoc(h1, file, 0, 0, 0);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			current = true;
		},

		p: noop,

		i: function intro(target, anchor) {
			if (current) return;

			this.m(target, anchor);
		},

		o: run,

		d: function destroy(detach) {
			if (detach) {
				detachNode(h1);
			}
		}
	};
}

function Chatbox(options) {
	this._debugName = '<Chatbox>';
	if (!options || (!options.target && !options.root)) {
		throw new Error("'target' is a required option");
	}

	init(this, options);
	this._state = assign({}, options.data);
	this._intro = !!options.intro;

	this._fragment = create_main_fragment(this, this._state);

	if (options.target) {
		if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		this._fragment.c();
		this._mount(options.target, options.anchor);
	}

	this._intro = true;
}

assign(Chatbox.prototype, protoDev);
assign(Chatbox.prototype, methods);

Chatbox.prototype._checkReadOnly = function _checkReadOnly(newState) {
};

export default Chatbox;
//# sourceMappingURL=Chatbox.js.map
